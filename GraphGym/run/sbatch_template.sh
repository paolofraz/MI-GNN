#!/bin/bash

# THIS FILE IS GENERATED BY AUTOMATION SCRIPT! PLEASE REFER TO ORIGINAL SCRIPT!
# THIS FILE IS A TEMPLATE AND IT SHOULD NOT BE DEPLOYED TO PRODUCTION!

#SBATCH --partition={{PARTITION_NAME}}
#SBATCH --job-name={{JOB_NAME}}
#SBATCH --output=/home/frazzetp/MI-GNN/SLURM/RAY/{{JOB_NAME}}.log
#SBATCH --error=/home/frazzetp/MI-GNN/SLURM/RAY/{{JOB_NAME}}.err
##SBATCH --open-mode=append
{{GIVEN_NODE}}

### This script works for any number of nodes, Ray will find and manage all resources
#SBATCH --nodes={{NUM_NODES}}
#SBATCH --exclusive

### Give all resources to a single Ray task, ray can manage the resources internally
#SBATCH --ntasks-per-node=1
#SBATCH --gpus-per-task={{NUM_GPUS_PER_NODE}}

### PF Adds
#SBATCH --cpus-per-task=1
#SBATCH --mem=16GB

# Load modules or your own conda environment here
# module load pytorch/v1.4.0-gpu
# conda activate {{CONDA_ENV}}
source ~/miniconda3/etc/profile.d/conda.sh
{{LOAD_ENV}}

################# DON NOT CHANGE THINGS HERE UNLESS YOU KNOW WHAT YOU ARE DOING ###############
# This script is a modification to the implementation suggest by gregSchwartz18 here:
# https://github.com/ray-project/ray/issues/826#issuecomment-522116599
redis_password=$(uuidgen)
export redis_password

srun ray stop

nodes=$(scontrol show hostnames $SLURM_JOB_NODELIST) # Getting the node names
nodes_array=($nodes)

node_1=${nodes_array[0]}
ip=$(srun --nodes=1 --ntasks=1 -w $node_1 hostname --all-ip-addresses) # making redis-address
#ip=$(srun --nodes=1 --ntasks=1 -w $node_1 hostname --ip-addresses) # making redis-address
ip=$(echo "$ip" | tr -d ' ')

#echo "First node's IP: $ip"
#srun --nodes=1 --ntasks=1 -w $node_1 ip a
#ip=$(srun --nodes=1 --ntasks=1 -w $node_1 ip -o -4 addr list enp1s0 | awk '{print $4}' | cut -d/ -f1)

if [[ $ip == *" "* ]]; then
  IFS=' ' read -ra ADDR <<<"$ip"
  if [[ ${#ADDR[0]} > 16 ]]; then
    ip=${ADDR[1]}
  else
    ip=${ADDR[0]}
  fi
  echo "We detect space in ip! You are using IPV6 address. We split the IPV4 address as $ip"
fi

port=8765 # 6379
ip_head=$ip:$port
export ip_head
echo "IP Head: $ip_head"

echo "STARTING HEAD at $node_1"
# srun --nodes=1 --ntasks=1 -w $node_1 start-head.sh $ip $redis_password &
srun --nodes=1 --ntasks=1 -w $node_1 \
  ray start --head --node-ip-address=$ip --port=$port --redis-password=$redis_password --log-style record --log-color false --block &
sleep 15

worker_num=$(($SLURM_JOB_NUM_NODES - 1)) #number of nodes other than the head node
for ((i = 1; i <= $worker_num; i++)); do
  node_i=${nodes_array[$i]}
  echo "STARTING WORKER $i at $node_i"
  this_node_ip=$(srun --nodes=1 --ntasks=1 -w $node_i hostname -I | tr -d ' ')
  srun --nodes=1 --ntasks=1 -w $node_i ray start --address=$ip_head --redis-password=$redis_password --node-ip-address=$this_node_ip --log-style record --log-color false --block &
  sleep 5
done

echo "Ray Status:"
#srun --nodes=1 --ntasks=1 -w $node_1 ray status
ray status

# Print the GPUs available on the node
#nvidia-smi
##############################################################################################

#### call your code below
{{COMMAND_PLACEHOLDER}} {{COMMAND_SUFFIX}}
